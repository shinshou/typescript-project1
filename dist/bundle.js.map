{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://typescript-project/./src/models/project.ts","webpack://typescript-project/./src/components/base-component.ts","webpack://typescript-project/./src/decorators/autobind.ts","webpack://typescript-project/./src/state/project-state.ts","webpack://typescript-project/./src/components/project-item.ts","webpack://typescript-project/./src/components/project-list.ts","webpack://typescript-project/./src/util/validation.ts","webpack://typescript-project/./src/components/project-input.ts","webpack://typescript-project/./src/app.ts"],"sourcesContent":["  //プロジェクトの実行、終了を定義する型を定義。\n  export enum ProjectStatus {\n    Active,\n    Finished,\n  }\n  //オブジェクトの型を定義するクラスを作成\n  export class Project {\n    constructor(\n      public id: string,\n      public title: string,\n      public description: string,\n      public manday: number,\n      public status: ProjectStatus\n    ) {}\n  }","//ProjectList,ProjectInputクラスで冗長になっているプログラムを一つにまとめるクラスの作成。\n//Componentクラス、画面のUIのためのクラスとして一般的につけられる名称。\n//このクラスを継承する際に型を指定することができるようにジェネリックを定義する。\n//abstract化するとインスタンス化できなくなる。\nexport abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n  //HTMLのTemplate要素を取得するプロパティ。\n  templateElement: HTMLTemplateElement;\n  hostElement: T; //継承の際に具体的な型定義が必要。\n  element: U; //継承の際に具体的な型定義が必要。\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtStart: boolean, //プロジェクトの挿入位置を指定。\n    newElementId?: string\n  ) {\n    //templateElement ID#project-list要素を取得。\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement;\n    //hestElement ID#app要素を取得。\n    this.hostElement = document.getElementById(hostElementId)! as T;\n    //template要素をHTMLにインポート\n    const importedNode = document.importNode(\n      this.templateElement.content,\n      true\n    );\n    this.element = importedNode.firstElementChild as U;\n    if (newElementId) {\n      this.element.id = newElementId;\n    }\n\n    this.attach(insertAtStart);\n  }\n\n  abstract configure(): void;\n  abstract renderContent(): void;\n\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\n      this.element\n    );\n  }\n}\n","// オートバインドデコレータ\n//デコレータは３つの引数を受け取る。\n//target,プロパティ名,プロパティディスクリプタ\nexport function autobind(\n  target: any,\n  methodName: string,\n  descriptor: PropertyDescriptor\n) {\n  //submitHandler関数のプロパティを取得\n  const originalMethod = descriptor.value;\n  //プロパティの設定を変更したあとのディスクリプターをadjDesciptorに格納\n  const adjDescriptor: PropertyDescriptor = {\n    //プロパティを変更できるように。\n    configurable: true,\n    //submitHandler関数のオリジナルにアクセスするときに実行される。\n    get() {\n      //submitHandlerにbindメソッドを適応した新しいプロパティの関数をboudFnに格納。\n      const boundFn = originalMethod.bind(this);\n      //新しくプロパティが更新された関数の返却。\n      return boundFn;\n    },\n  };\n  //autobindの返り値をadjDescriptorに設定。\n  return adjDescriptor;\n}\n","import { Project, ProjectStatus } from \"../models/project\";\n\n//関数の型を表すエイリアス。\n//型Listnerは引数に配列があり、戻り値は何も返さない\ntype Listner<T> = (items: T[]) => void;\n\n//状態を定義するクラスを作成。\nclass State<T> {\n  //関数を格納する配列。\n  protected listners: Listner<T>[] = [];\n\n  //引数で渡された関数をlistnersプロパティに格納\n  addListner(listnerFn: Listner<T>) {\n    this.listners.push(listnerFn);\n  }\n}\n\n//このプロジェクトの状態を監視するクラスを作成。\nexport class ProjectState extends State<Project> {\n  //作成されたプロジェクトを格納する配列。\n  private projects: Project[] = [];\n  //インスタンスを保持するためのプロパティ\n  private static instance: ProjectState;\n\n  //シングルトンクラスconstructorを作成。このプロジェクトないでは必ず一つしかインスタンスが存在しないクラス。privateを定義しているから。このクラスないからでしか、このconstructorは呼び出せない。インスタンス化できない。\n  private constructor() {\n    super();\n  }\n\n  //staticメソッド。このクラスがインスタンス化されていなくてもクラス外からの呼び出しが可能。\n  static getInstance() {\n    if (this.instance) {\n      return this.instance;\n    }\n    this.instance = new ProjectState();\n    return this.instance;\n  }\n\n  //プロジェクトの項目取得＋追加メソッド。\n  addProject(title: string, description: string, manday: number) {\n    //newProjectに新しいプロジェクトを作成。\n    //newProjectにProjectクラスのインスタンスを作成。id,title,description,manday,statusの引数を与える。\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      manday,\n      ProjectStatus.Active\n    );\n\n    //新規でaddProjectメソッドが実行されたときに、作成されたnewProjectをprojectsプロパティに格納。\n    this.projects.push(newProject);\n    this.updateListners();\n  }\n\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((prj) => prj.id === projectId);\n    if (project && project.status !== newStatus) {\n      project.status = newStatus;\n      this.updateListners();\n    }\n  }\n\n  private updateListners() {\n    //addProjectメソッドが実行されるたびに、listners配列に格納されている関数をすべて実行。\n    for (const listnerFn of this.listners) {\n      //listnerFnに現在のprojects配列を引数として渡す。ただし、オリジナルのデータを引数とするのではなくslice()メソッドで複製を作成。\n      listnerFn(this.projects.slice());\n    }\n  }\n}\n\n//staticなメソッドなのでProjectStateをインスタンス化しなくても外部からgetInstanceメソッドを呼び出せる。\nexport const projectState = ProjectState.getInstance();\n","import { Draggable } from \"../models/drag-drop\";\nimport { Project } from \"../models/project\";\nimport { Component } from \"./base-component\";\nimport { autobind } from \"../decorators/autobind\";\n\n// ProjectItemクラス リストの項目を表示するクラス。\n// ProjectItemクラスは表示に関するクラスなので、Componentクラスを継承する。\n//Componentのジェネリック型に\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  //projectプロパティを型をProjectとして定義。\n  private project: Project;\n\n  // getter関数の追加。\n  get manday() {\n    if (this.project.manday < 20) {\n      return this.project.manday.toString() + \"人日\";\n    } else {\n      return (this.project.manday / 20).toString() + \"人月\";\n    }\n  }\n  //インスタンス化する際にコンストラクターに追加先のIDと\n  constructor(hostId: string, project: Project) {\n    super(\"single-project\", hostId, false, project.id);\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragStartHandler(event: DragEvent): void {\n    //eventオブジェクトのdataTransferメソッドを呼びだす\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\n    //ドラッグしたときの矢印の形を変える\n    event.dataTransfer!.effectAllowed = \"move\";\n  }\n\n  dragEndHandler(event: DragEvent): void {\n    console.log(\"Drag終了\");\n  }\n\n  configure(): void {\n    //dragstartイベントは標準のDOMイベント\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\n  }\n\n  renderContent(): void {\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\n    //getter関数mandayを実行している。\n    this.element.querySelector(\"h3\")!.textContent = this.manday;\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\n  }\n}\n","import { DragTarget } from \"../models/drag-drop\";\nimport { Project, ProjectStatus } from \"../models/project\";\nimport { Component } from \"./base-component\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\nimport { ProjectItem } from \"./project-item\";\n\n//プロジェクトのリストを表示するクラス。\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  //constructorに引数「private tyoe」と指定すると、\n  //typeという名称のプロパティを追加できる。\n  constructor(private type: \"active\" | \"finished\") {\n    //ベースクラスのコンストラクターを呼び出す。\n    //superの呼び出しが完了するまではthisが使えない。\n    super(\"project-list\", \"app\", false, `${type}-projects`);\n\n    //assignedProjectsの初期値を設定。\n    this.assignedProjects = [];\n\n    //下記２つのメソッドはベースクラスからも呼び出しが可能だが、継承クラスにあるメソッドをベースクラスから呼び出すとバグになる可能性がある。\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragOverHandler(event: DragEvent): void {\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      //javascriptでは基本的にdropイベントが禁止されている。dragされた要素が指定位置に来たときにpreventDefaltすることでdropイベントを許可することができる。これでdropイベントが利用できるようになる。\n      event.preventDefault();\n      const listEl = this.element.querySelector(\"ul\")!;\n      listEl.classList.add(\"droppable\");\n    }\n  }\n\n  @autobind\n  dropHandler(event: DragEvent): void {\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\n    projectState.moveProject(\n      prjId,\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n\n  @autobind\n  dragLeaveHandler(event: DragEvent): void {\n    const listEl = this.element.querySelector(\"ul\")!;\n    listEl.classList.remove(\"droppable\");\n  }\n\n  //基本的にはパブリックメソッドはプライベートメソッドの上で定義される。\n  //ベースクラスでabstractされているので必ず継承クラスではconfigureメソッドの作成が必要。\n  configure(): void {\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\n    this.element.addEventListener(\"drop\", this.dropHandler);\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\n    //addListnerメソッドに関数を定義\n    //関数の引数に渡されているprojectsはprojectStateで定義されているプロパティ。\n    projectState.addListner((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === \"active\") {\n          return prj.status === ProjectStatus.Active;\n        }\n        return prj.status === ProjectStatus.Finished;\n      });\n      //listner関数で何かしらの処理がされたprojectsをaiignedProjectsに格納。\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    //ID名をactive-project-listかfinished-project-listに設定。\n    const listId = `${this.type}-project-list`;\n\n    //ulタグのIDに上記をIDにを設定。\n    this.element.querySelector(\"ul\")!.id = listId;\n    //h2タグの中身にtypeがactiveであれば実行中プロジェクトを挿入。finishedであれば完了プロジェクトを挿入。\n    this.element.querySelector(\"h2\")!.textContent =\n      this.type === \"active\" ? \"実行中プロジェクト\" : \"完了プロジェクト\";\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-project-list`\n    )! as HTMLUListElement;\n    listEl.innerHTML = \"\";\n    for (const prjItem of this.assignedProjects) {\n      new ProjectItem(listEl.id, prjItem);\n    }\n  }\n}\n","//バリデーション関数に渡される引数のプロパティ定義。\nexport interface Validatable {\n  value: string | number;\n  //必須ではないバリデーションの項目には？をつけて必ず必要な項目ではないと定義。\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\n//バリデーション関数の定義\nexport function validate(validatableInput: Validatable) {\n  //チェック結果を格納する変数の定義\n  let isValid = true;\n  //渡された入力値が必須入力項目であるかチェック。\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n  }\n  //最小文字数のチェック\n  if (\n    validatableInput.minLength &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length >= validatableInput.minLength;\n  }\n  //最大文字数のチェック\n  if (\n    validatableInput.maxLength &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length < validatableInput.maxLength;\n  }\n  //最小数のチェック\n  if (validatableInput.min && typeof validatableInput.value === \"number\") {\n    isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  //最大数のチェック\n  if (validatableInput.max && typeof validatableInput.value === \"number\") {\n    isValid = isValid && validatableInput.value < validatableInput.max;\n  }\n  return isValid;\n}\n","import { Component } from \"./base-component\";\nimport { Validatable,validate } from \"../util/validation\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\n\n//フォームの表示と入力値の取得のクラス。\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  //プロパティ...InputElementにHTMLのInput要素であると指定。\n  titleInputElement: HTMLInputElement;\n  descriptionInputElement: HTMLInputElement;\n  mandayInputElement: HTMLInputElement;\n\n  //HTMLから要素を参照するプロパティの追加。\n  constructor() {\n    super(\"project-input\", \"app\", true, \"user-input\");\n\n    //HTMLのForm要素内の#titleを取得\n    this.titleInputElement = this.element.querySelector(\n      \"#title\"\n    ) as HTMLInputElement;\n\n    //HTMLのForm要素内の#descriptionを取得\n    this.descriptionInputElement = this.element.querySelector(\n      \"#description\"\n    ) as HTMLInputElement;\n\n    //HTMLのForm要素内の#mandayを取得\n    this.mandayInputElement = this.element.querySelector(\n      \"#manday\"\n    ) as HTMLInputElement;\n\n    //configureメソッドの実行。\n    this.configure();\n  }\n\n  //formのイベントリスナーメソッド\n  configure() {\n    //form要素がsubmitされたときのイベントを定義\n    this.element.addEventListener(\"submit\", this.submitHandler);\n  }\n\n  //抽象クラスの定義を満たすためにrenderContent()メソッドを作成。\n  renderContent(): void {}\n\n  //入力値のリセット処理\n  private clearInputs() {\n    this.titleInputElement.value = \"\";\n    this.descriptionInputElement.value = \"\";\n    this.mandayInputElement.value = \"\";\n  }\n\n  //ユーザーがインプットした値をバリデーションする。gatherUserInputの返り値は、タプルで指定する。\n  private gatherUserInput(): [string, string, number] | void {\n    //if文の分岐で空の文字列があった場合に、返り値が何もない時の指定。\n    const enteredTitle = this.titleInputElement.value;\n    const enteredDescription = this.descriptionInputElement.value;\n    const enteredManday = this.mandayInputElement.value;\n\n    //バリデート関数に渡すオブジェクトの定義。\n    const titleValidatable: Validatable = {\n      value: enteredTitle,\n      required: true,\n    };\n    const descriptionValidatable: Validatable = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n    const mandayValidatable: Validatable = {\n      value: +enteredManday,\n      required: true,\n      min: 1,\n      max: 1000,\n    };\n    //ユーザーが入力した値が空でないかを確認する。\n    if (\n      !validate(titleValidatable) ||\n      !validate(descriptionValidatable) ||\n      !validate(mandayValidatable)\n    ) {\n      //空の文字列が送信された。\n      alert(\"入力値が正しくありません。再度お試しください。\");\n      return;\n    } else {\n      //正しい値が入力された。\n      return [enteredTitle, enteredDescription, +enteredManday];\n    }\n  }\n\n  //submitイベントの処理メソッド\n  @autobind //autobindの処理をデコレータで追加。\n  private submitHandler(event: Event) {\n    event.preventDefault(); //このフォームからHTTPリクエストが送られないようにする。\n    const userInput = this.gatherUserInput();\n    //gatherUserInputからの返り値がタプル（正しい入力値）で返ってきているかの確認。\n    if (Array.isArray(userInput)) {\n      const [title, desc, manday] = userInput;\n      projectState.addProject(title, desc, manday);\n      //正しく値が返ってきていれば入力値をクリアする。\n      this.clearInputs();\n    }\n  }\n}\n","//namespaceの読み込み\nimport { ProjectList } from \"./components/project-list\";\nimport { ProjectInput } from \"./components/project-input\";\n\n//ProjectInputクラスのインスタンスを作成。\nconst prjInput = new ProjectInput();\n//Projectlistクラスのインスタンスを作成。\nconst activePrjList = new ProjectList(\"active\");\nconst finishedPrjList = new ProjectList(\"finished\");\n"],"names":["ProjectStatus","Project","constructor","id","title","description","manday","status","Component","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","attach","insertAtBeginning","insertAdjacentElement","autobind","target","methodName","descriptor","originalMethod","value","configurable","get","bind","ProjectState","listners","addListner","listnerFn","push","super","projects","static","instance","addProject","newProject","Math","random","toString","Active","updateListners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectItem","hostId","configure","renderContent","dragStartHandler","event","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","addEventListener","querySelector","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","preventDefault","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","listEl","innerHTML","prjItem","validate","validatableInput","isValid","required","trim","length","minLength","maxLength","min","max","ProjectInput","titleInputElement","descriptionInputElement","mandayInputElement","submitHandler","clearInputs","gatherUserInput","enteredTitle","enteredDescription","enteredManday","descriptionValidatable","mandayValidatable","alert","userInput","Array","isArray","desc"],"sourceRoot":""}